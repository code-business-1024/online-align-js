import React, { createContext, useContext, useState, useEffect } from 'react';
import defaultSentenceData from './sentence-data.json';
import {
  formatResponseObjArray,
  mergeObjArray,
  rebuildObjArrayKeyByIndex,
} from '../OnlineAlign/sentence-util';
import useListenerKey from './custom-hooks';
import { notification } from 'antd';

// ÂàõÂª∫ SentenceContext ‰∏ä‰∏ãÊñá
const SentenceContext = createContext([]);

export const useSentences = () => useContext(SentenceContext);

export const SentenceProvider = ({ children }) => {
  // ÂΩìÂâçÊìç‰ΩúÊ†áËØÜ value1 value2
  const [opMark, setOpMark] = useState('value1');
  // ÂΩìÁî®Êà∑Êåâ‰ΩèshiftÂèØ‰ª•Âú®‰ª•‰∏ãÂèòÈáè‰∏≠Â≠òÊîæÂ§ö‰∏™Êï∞ÊçÆ
  const [opRecords, setOpRecords] = useState([]);

  const [sentences, setSentences] = useState(defaultSentenceData);

  const [checkboxMark, setCheckboxMark] = useState(true);

  const [focusElementId, setFocusElementId] = useState();

  /**
   * ËÆæÁΩÆÂΩìÂâçÊìç‰ΩúÊ†áËØÜÂèÇÊï∞
   * @param {*} mark
   * @param {*} key
   * @param {*} sentence
   */
  const setOpObj = (flag, mark, record) => {
    console.log('üöÄ ~ setOpObj ~~ flag:', flag, 'mark:', mark);
    console.table(record);
    let finalOpRecord = [];
    if (mark) {
      setOpMark(mark);
      console.log('üöÄ ~ setOpObj ~~ mark:', mark, ' => opMark:', opMark);
    }
    if (flag) {
      // Êñ∞Â¢û
      finalOpRecord = opRecords;
      finalOpRecord.push(record);
    } else {
      // ÂáèÂ∞ë
      finalOpRecord = opRecords.filter((item) => item.key != record.key);
    }
    setOpRecords(finalOpRecord);
    console.log('üöÄ ~ setOpRecords ~~ finalOpRecord:', finalOpRecord, '=> opRecords:', opRecords);
    console.table(finalOpRecord);
  };

  /**
   * Ê∏ÖÁ©∫ÂΩìÂâçÊìç‰ΩúÊ†áËØÜÂàóË°®
   * Ê∏ÖÁ©∫ÈÄâ‰∏≠È°π
   */
  const clearOpObj = () => {
    setOpRecords([]);
    setCheckboxMark(false);
    console.log(
      'üöÄ ~ file: sentence-hooks.js ~ line 63 ~ clearOpObj ~ setCheckboxMark',
      checkboxMark,
    );
  };

  /**
   * Êñá‰ª∂‰∏ä‰º†ËÆæÁΩÆÈÉ®ÂàÜ table values ÂÄº
   * @param {*} mark Â≠óÊÆµÊ†áËÆ∞
   * @param {*} data ÊñáÊú¨Ëß£ÊûêÊï∞ÊçÆ {key, value}
   */
  const setPartValue = (mark, data) => {
    let finalData = [];
    let formatData = formatResponseObjArray(mark, data);
    console.log(`Ê†ºÂºèÂåñResponseÊï∞ÊçÆ ${JSON.stringify(formatData)}`);
    switch (mark) {
      case 'value1':
        finalData = mergeObjArray(data, sentences);
        break;
      case 'value2':
        finalData = mergeObjArray(sentences, data);
        break;
      default:
        break;
    }
    // console.log(`ÊúÄÁªàÂêàÂπ∂SentenceÊï∞ÊçÆ ${JSON.stringify(finalData)}`);
    setSentences(finalData);
  };

  /**
   * ‰øÆÊîπ sentence ÈÄöËøá input ËæìÂÖ•Ê°Ü
   * @param {*} mark  Â≠óÊÆµÊ†áÂøó
   * @param {*} key   Á¥¢Âºï/Â∫èÂè∑
   * @param {*} value Êñ∞ÂÄº
   */
  const setSentenceValue = (mark, key, value) => {
    let finalData = [];
    console.log(`ËæìÂÖ•Ê°Ümark: ${mark} key: ${key} InputÊï∞ÊçÆ: ${JSON.stringify(value)}`);
    // console.table(mark, key, value);
    sentences.map((item) => {
      let tempObj = item;
      if (item.key === key) {
        tempObj[mark] = value;
      }
      // console.log(tempObj);
      finalData.push(tempObj);
    });
    setSentences(finalData);
    console.table(sentences);
  };

  /**
   * Âú®‰∏äÊñπÊèíÂÖ• Âú®‰∏ãÊñπÊèíÂÖ•
   * @param {*} type up & down
   * @param {*} key  number
   * @param {*} mark value1 & value2
   */
  const insertSentenceByKey = (type) => {
    let opPartData = [];
    console.log('üöÄ ~ ÊèíÂÖ•ÂâçÂèÇÊï∞È¢ÑËßà => ÂΩìÂâçÊ¥ªÂä®Âàó opRecords:', opRecords);
    if (opRecords.length != 1) {
      notification.warning({
        message: 'Êìç‰ΩúÈùûÊ≥ï!',
        description: 'Êúâ‰∏î‰ªÖËÉΩÂ§üÈÄâ‰∏≠‰∏ÄÈ°πËøõË°åÊìç‰Ωú!',
        duration: 2,
      });
      return;
    }
    let key = opRecords[0].key;
    // Â§ÑÁêÜÊèíÂÖ•ÈÄªËæë
    sentences.map((item) => {
      let tempObj = {
        key: item.key,
        value: item[opMark],
      };
      let addObj = {
        key: type === 'up' ? key - 1 : key + 1,
        value: '',
      };
      if (type === 'up' && item.key === key) {
        opPartData.push(addObj);
        opPartData.push(tempObj);
      } else if (type === 'down' && item.key === key) {
        opPartData.push(tempObj);
        opPartData.push(addObj);
      } else {
        opPartData.push(tempObj);
      }
    });
    opPartData = rebuildObjArrayKeyByIndex(opPartData);
    console.table(opPartData);
    console.log('üöÄ ~ file: sentence-hooks.js ~ line 147 ~ insertSentenceByKey ~ opMark', opMark);
    setPartValue(opMark, opPartData);
  };

  // Âà†Èô§
  const deleteSentenceByKeyAndMark = () => {
    console.log('üöÄ ~ Âà†Èô§ÂâçÂèÇÊï∞È¢ÑËßà => ÂΩìÂâçÊ¥ªÂä®Âàó opRecords:', opRecords);
    console.table(opRecords);
    if (opRecords.length == 0) {
      notification.warning({
        message: 'Êìç‰ΩúÈùûÊ≥ï!',
        description: 'ËØ∑‰øùËØÅËá≥Â∞ëÈÄâ‰∏≠‰∏ÄÈ°πËøõË°åÊìç‰Ωú!',
        duration: 2,
      });
      return;
    }
    let maxKey = Math.max(...Object.keys(opRecords)) + 1;
    let opPartData = [];
    sentences.map((item) => {
      let tempOpRecord = opRecords.filter((opItem) => opItem.key === item.key)[0] || {};
      if (JSON.stringify(tempOpRecord) === '{}') {
        let tempObj = {};
        tempObj['key'] = item.key;
        tempObj['value'] = item[opMark];
        opPartData.push(tempObj);
      }
    });
    opPartData = rebuildObjArrayKeyByIndex(opPartData);
    console.log('üöÄ ~ Âà†Èô§ÂâçÂèÇÊï∞È¢ÑËßà => Âà†Èô§ÂêéÁöÑÈÉ®ÂàÜÁªìÊûúÂàó opPartData:', opPartData);
    console.table(opPartData);
    setPartValue(opMark, opPartData);
  };

  // ‰∏äÁßª ‰∏ãÁßª

  // ÊãÜÂàÜ
  const splitSentence = () => {
    let opPartData = [];
    console.log(focusElementId);
    let dom = document.getElementById(focusElementId);
    setTimeout(() => {
      console.log(dom.selectionStart, dom.selectionEnd);
    }, 0);
    let opContent = opRecords[0][opMark] + '';
    let key = opRecords[0].key;
    let splitObj1 = {
      key: key,
      value: opContent.substring(0, dom.selectionStart),
    };
    let splitObj2 = {
      key: key + 1,
      value: opContent.substring(dom.selectionStart),
    };
    sentences.map((item) => {
      if (item.key === key) {
        opPartData.push(splitObj1);
        opPartData.push(splitObj2);
      } else {
        let tempObj = {
          key: item.key,
          value: item[opMark],
        };
        opPartData.push(tempObj);
      }
    });
    opPartData = rebuildObjArrayKeyByIndex(opPartData);
    setPartValue(opMark, opPartData);
  };

  // ÂêàÂπ∂

  return (
    <SentenceContext.Provider
      value={{
        opRecords,
        sentences,
        opMark,
        checkboxMark,
        focusElementId,
        splitSentence,
        setFocusElementId,
        setCheckboxMark,
        clearOpObj,
        setOpObj,
        setOpMark,
        setPartValue,
        setSentenceValue,
        deleteSentenceByKeyAndMark,
        insertSentenceByKey,
      }}
    >
      {children}
    </SentenceContext.Provider>
  );
};
